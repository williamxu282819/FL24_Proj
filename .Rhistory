temp.R
Rscript temp.R
pwd
ls
# Load the 'crowds.csv' file from the specified directory
crowds <- read_csv('./crowd_summary_stat/same_images/crowds.csv')
# Load the 'crowds.csv' file from the specified directory
crowds <- read.csv('./crowd_summary_stat/same_images/crowds.csv')
# Load required libraries
library(dplyr)
library(readr)
library(tidyr)
# Load the 'crowds.csv' file from the specified directory
crowds <- read.csv('./crowd_summary_stat/same_images/crowds.csv')
# Step 1: Make a copy of the dataset and select specific columns
crowds_copy <- crowds %>%
select(confidence_cnn, predicted_label_cnn, true_label, MNIST_index)
# Step 2: Generate a binary column 'accuracy' indicating whether the prediction is correct
crowds_copy <- crowds_copy %>%
mutate(accuracy = as.integer(predicted_label_cnn == true_label))
# Step 3: Group by 'MNIST_index' and calculate the average confidence and accuracy
crowds_copy <- crowds_copy %>%
group_by(MNIST_index) %>%
summarise(
avg_confidence_cnn = mean(confidence_cnn, na.rm = TRUE),
avg_accuracy = mean(accuracy, na.rm = TRUE)
) %>%
ungroup()
# Step 4: Create confidence intervals (bins) from 0-0.1, 0.1-0.2, ..., 0.9-1.0
crowds_copy <- crowds_copy %>%
mutate(category = cut(avg_confidence_cnn, breaks = seq(0, 1, 0.1), include.lowest = TRUE))
# Step 5: Group by category and calculate average accuracy and confidence for each category
crowds_copy <- crowds_copy %>%
group_by(category) %>%
summarise(
avg_confidence_cnn = mean(avg_confidence_cnn, na.rm = TRUE),
avg_accuracy = mean(avg_accuracy, na.rm = TRUE)
) %>%
ungroup()
print(crowds_copy)
# Step 6: Repeat similar operations but group by 'network'
# Make a copy of the dataset
crowds_copy2 <- crowds %>%
select(confidence_cnn, predicted_label_cnn, true_label, network)
# Generate a binary column 'accuracy'
crowds_copy2 <- crowds_copy2 %>%
mutate(accuracy = as.integer(predicted_label_cnn == true_label))
# Group by 'network' and calculate average confidence and accuracy
crowds_copy2 <- crowds_copy2 %>%
group_by(network) %>%
summarise(
avg_confidence_cnn = mean(confidence_cnn, na.rm = TRUE),
avg_accuracy = mean(accuracy, na.rm = TRUE)
) %>%
ungroup()
# Create confidence intervals (bins) from 0-0.1, 0.1-0.2, ..., 0.9-1.0
crowds_copy2 <- crowds_copy2 %>%
mutate(category = cut(avg_confidence_cnn, breaks = seq(0, 1, 0.1), include.lowest = TRUE))
# Group by category and calculate average accuracy and confidence for each category
crowds_copy2 <- crowds_copy2 %>%
group_by(category) %>%
summarise(
avg_confidence_cnn = mean(avg_confidence_cnn, na.rm = TRUE),
avg_accuracy = mean(avg_accuracy, na.rm = TRUE)
) %>%
ungroup()
print(crowds_copy2)
View(crowds)
# Load required libraries
library(dplyr)
library(readr)
library(tidyr)
# Load the 'crowds.csv' file from the specified directory
crowds <- read.csv('./crowd_summary_stat/same_images/crowds.csv') # change this directory as necessary
# Step 1: Make a copy of the dataset and select specific columns
crowds_copy <- crowds %>%
select(confidence_cnn, predicted_label_cnn, true_label, MNIST_index)
# Step 2: Generate a binary column 'accuracy' indicating whether the prediction is correct
crowds_copy <- crowds_copy %>%
mutate(accuracy = as.integer(predicted_label_cnn == true_label))
# Step 3: Group by 'MNIST_index' and calculate the average confidence and accuracy
# This aggregate over CNNs by image (averaging, for instance,
# the confidence assigned by the 1500 CNNs to MNIST_index = 198 (image 1) showing the digit 3 for all 1500 CNNs),
# and then compare confidence with accuracy
crowds_copy <- crowds_copy %>%
group_by(MNIST_index) %>%
summarise(
avg_confidence_cnn = mean(confidence_cnn, na.rm = TRUE),
avg_accuracy = mean(accuracy, na.rm = TRUE)
) %>%
ungroup()
# Step 4: Create confidence intervals (bins) from 0-0.1, 0.1-0.2, ..., 0.9-1.0
crowds_copy <- crowds_copy %>%
mutate(category = cut(avg_confidence_cnn, breaks = seq(0, 1, 0.1), include.lowest = TRUE))
# Step 5: Group by category and calculate average accuracy and confidence for each category
crowds_copy <- crowds_copy %>%
group_by(category) %>%
summarise(
avg_confidence_cnn = mean(avg_confidence_cnn, na.rm = TRUE),
avg_accuracy = mean(avg_accuracy, na.rm = TRUE)
) %>%
ungroup()
print(crowds_copy)
# Step 6: Repeat similar operations but group by 'network'
# Make a copy of the dataset
crowds_copy2 <- crowds %>%
select(confidence_cnn, predicted_label_cnn, true_label, network)
# Generate a binary column 'accuracy'
crowds_copy2 <- crowds_copy2 %>%
mutate(accuracy = as.integer(predicted_label_cnn == true_label))
# Group by 'network' and calculate average confidence and accuracy
# This aggregate over each CNN network (averaging, for instance,
# all confidences assigned by each CNN over 300 different images),
# and then compare confidence with accuracy
crowds_copy2 <- crowds_copy2 %>%
group_by(network) %>%
summarise(
avg_confidence_cnn = mean(confidence_cnn, na.rm = TRUE),
avg_accuracy = mean(accuracy, na.rm = TRUE)
) %>%
ungroup()
# Create confidence intervals (bins) from 0-0.1, 0.1-0.2, ..., 0.9-1.0
crowds_copy2 <- crowds_copy2 %>%
mutate(category = cut(avg_confidence_cnn, breaks = seq(0, 1, 0.1), include.lowest = TRUE))
# Group by category and calculate average accuracy and confidence for each category
crowds_copy2 <- crowds_copy2 %>%
group_by(category) %>%
summarise(
avg_confidence_cnn = mean(avg_confidence_cnn, na.rm = TRUE),
avg_accuracy = mean(avg_accuracy, na.rm = TRUE)
) %>%
ungroup()
print(crowds_copy2)
